const fs = require('fs');

const PersonModel = require('../models/person-model');

const dbPath = `${__dirname}/../database.json`;

/*
   Find all people
*/
function findAll() {
    return new Promise((resolve, reject) => {
        // fs async expects cb, no no async/await here
        fs.readFile(dbPath, 'utf8', (err, file) => {
            if (err) return reject(err);

            const people = JSON.parse(file).map(PersonModel.create);

            resolve(people);
        });
    });
}
/*
    Utility function to save all
*/
function saveAll(people) {
    return new Promise((resolve, reject) => {
        fs.writeFile(dbPath, JSON.stringify(people), (err, file) => {
            if (err) return reject(err);

            resolve();
        });
    });
}
/*
    Add a new person
*/
async function add(person) {
    // fetch all people
    const allPeople = await findAll();
    // find last person
    const lastPerson = allPeople[allPeople.length - 1];
    // find last person's id, if the list is empty, default it to 0.
    const lastPersonsId = lastPerson && lastPerson.id || 0;
    // id is generated by computer, to be unique
    // so we increment it by one from the last person's id.
    // then assign it to the new person
    person.id = lastPersonsId + 1;

    // create a new person
    person = PersonModel.create(person);
    // add the newly created person to the list
    allPeople.push(person);

    // write the new list to the db
    await saveAll(allPeople);

    // return so the next thenable function can use it.
    return person;
}
/*
    Delete a new person
*/
async function del(personId) {
    // fetch all people
    const allPeople = await findAll();
    // find the index of the requested person
    const personIndex = allPeople.findIndex(p => p.id == personId);
    // if we don't find him, return
    if (personIndex < 0) return;

    // otherwise, remove him from the list => mutate the list
    allPeople.splice(personIndex, 1);

    // update the list in the db
    saveAll(allPeople);
}
/*
    Find a person by id
*/
async function find(personId) {
    // fetch all people
    const allPeople = await findAll();

    // find the matching id and return it.
    return allPeople.find(p => p.id == personId);
}

module.exports = {
    findAll,
    find,
    add,
    del
};
